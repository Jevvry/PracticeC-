using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Segments
{
    class Program
    {
        static void Main(string[] args)
        {
        }
        ///Алгоритм основан на следующей идее:
        ///Представим вертикальную прямую, которая движется вправо 
        ///В какой-то момент она начнет пересекать отрезки и относительно движения прямой точки пересечения
        ///Будут перемещаться по этой прямой вверх или вниз, следовательно в какой-то момент времени 
        ///Если существует точка пересечения, то мы ее обнаружим
        ///Важный момент, что рассматривая точки на прямой мы перешли от абстрактного расположения отрезков
        ///К вполне упорядоченным точкам на нашем сечении прямой
        ///К тому же перемещение точек на сечении происходит по у(так как прямая вертикальная)
        ///И точки на сечении можем рассматривать как действительные числа
        
        ///Как это выполнено 
        ///Отрезок характеризуется началом и концом
        ///Точки имеют указатель на отрезок к которому они принадлежат
        ///И свойства указывающие является она началом или концом отрезка
        ///Отсортируем точки всех отрезков по х и сохраним, например в очередь
        ///Отрезки, которые сейчас пресекает прямая нужно хранить в структуре данных
        ///В который можно быстро удалять, добавлять, находить ближайших соседей справа и слева
        ///Идеально подойдет бинарное дерево поиска
        ///Снимаем точку с головы очереди и считаем, что наша прямая находится в ней
        /// Возможны две ситуации:
        /// Это точка начала отрезка, тогда мы проверяем на пересечение этого отрезка с ее соседями слева и справа
        /// И добавляем ее в наше дерево
        /// Это точка конца отрезка, тогда удаляем ее и проверяем на пересечение ее соседей
        /// Повторяем пока очередь не опустеет
        public Tuple<Segment, Segment> GetRes(List<Segment> segments)
        {
            //n - количество точек равное 2*k, где к - количество отрезков
            var queue = new Queue<Point>();
            var tree = new SortedSet<int>();
            Tuple<Segment, Segment> res = null;
            foreach (var e in segments.SelectMany(x => new[] { x.start, x.end }).OrderBy(a => a.x))
                queue.Enqueue(e); //Получаем nlogn операций
            while (queue.Count != 0)
            {
                // здесь n итераций и logn на выполнение методов 
                // весь алгоритм имеет сложность O(nlogn)
                var curPoint = queue.Dequeue();
                if (curPoint.IsStart)
                {
                    //вот тут и нужен поиск соседей точки, который я не смог реализовать 
                    // но сложность этой операции в бинарном дереве поиска была бы logn 
                    // res = CheckNeighbors();
                    tree.Add(curPoint.y);
                }
                else
                {                   
                    tree.Remove(curPoint.y);
                    //res = CheckNeighbors();
                }

            }
            return res;
        }
    }

    class Point
    {
        public int x;
        public int y;
        Segment segment;
        public bool IsStart => segment.start == this;
        public bool IsEnd => segment.end == this;
    }

    class Segment
    {
        public Point start, end;
    }
}



