using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AdGraph
{
/* Логика программы такая:
    Я считал, что по номеру в списке лежит список смежных с этой веершиной вершин
    Строю список вершин во всем графе пример {0,1,2,3}
    Беру вершину 0 и список смежных с ней вершин {1}
    Значит если я возьму разность множеств {0,1,2,3} - {1}, то получу дополнение к вешине 
    Эту разность реализует метод Subtraction
    Полученный список добавляю к результату
    Подобное проделываю с каждой из вершин
    
    Граф из Main
        1 — 0
        |
        2 — 3
    
    На выходе будет
        0 — 2
        |
        3 — 1
*/

    class Program
    {
        public static List<List<int>> AdGraph(List<List<int>> graph)
        {
            var len = graph.Count;
            var nodeNumbers = Enumerable.Range(0, len).ToList();
            var result = new List<List<int>>();
            for (int i =0; i< len;i++)
            {
                result.Add(Subtraction(nodeNumbers, graph[i],i));
            }
            return result;
        }
        public static List<int> Subtraction(List<int> list1, List<int> list2, int withOut)
        {
            var res = new List<int>();
            foreach (var e1 in list1)
            {
                if (e1 == withOut) continue;
                var isFound = false;
                foreach (var e2 in list2)
                    if (e1 == e2)
                    {
                        isFound = true;
                        break;
                    }
                if (!isFound)
                    res.Add(e1);
            }
            return res;
        }
        static void Main()
        {
            var graph = new List<List<int>>
            { new List<int> {1},
              new List<int>{0,2},
              new List<int>{1,3},
              new List<int>{2}
            };
            AdGraph(graph);
        }
    }
}
